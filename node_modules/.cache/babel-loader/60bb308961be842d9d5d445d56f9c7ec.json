{"ast":null,"code":"import _objectSpread from \"/home/jemma/Desktop/ReactFishes/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/jemma/Desktop/ReactFishes/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jemma/Desktop/ReactFishes/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jemma/Desktop/ReactFishes/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jemma/Desktop/ReactFishes/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jemma/Desktop/ReactFishes/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jemma/Desktop/ReactFishes/catch-of-the-day/src/components/App.js\";\nimport React from 'react';\nimport Header from './Header';\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from '../base';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fishes: {},\n      order: {}\n    };\n\n    _this.addFish = function (fish) {\n      // 1.setState: take a copy of existing state.\n      var fishes = _objectSpread({}, _this.state.fishes); // 2. add our new fish to fishes variable\n      // using timestamp for keys. fish on right side is passed-in fish object from createFish method in AddFishForm\n\n\n      fishes[\"fish\".concat(Date.now())] = fish; //Date.now() gives number of milliseconds since 1970...\n      //3. set the new fishes object to State.\n      // Takes copied fishes and new fishes and overwrites existing state.\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.updateFish = function (key, updatedFish) {\n      // take copy of current state (whole fish state object)\n      var fishes = _objectSpread({}, _this.state.fishes); // update that state\n\n\n      fishes[key] = updatedFish; // set the fishes object with new state\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.deleteFish = function (key) {\n      // 1. copy state\n      var fishes = _objectSpread({}, _this.state.fishes); // 2. update state: must be set to NULL for FIREBASE to know to delete it\n\n\n      fishes[key] = null; // \"delete\" (set to null) by key\n      // 3. setState\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.deleteOrderItem = function () {\n      console.log(\"deleted\");\n    };\n\n    _this.loadSampleFishes = function () {\n      _this.setState({\n        fishes: sampleFishes\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      // 1. take copy, 2. add to update number in order, 3. update state object\n      var order = _objectSpread({}, _this.state.order);\n\n      order[key] = order[key] + 1 || 1; //  if order.fish1 exists, add 1 to total, or if it doesnt, return 1 (add one of that fish.)\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = this.props.match.params; //first re-instate local storage\n\n      var localStorageRef = localStorage.getItem(params.storeId);\n      console.log(localStorageRef);\n\n      if (localStorageRef) {\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      }\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {\n        // firebase ref: reference to a piece of data in database\n        context: this,\n        state: 'fishes' // sync fish state\n\n      }); // sync state with props provided from Firebase, visible with react devtools in app/ props/match/storeID\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(this.state.order); // set key then value\n\n      localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order)); // stringify to change from it returning [object object]\n    } // need to listen for unchanges to prevent memory leak\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"catch-of-the-day\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Header, {\n        tagline: \"Fresh Seafood Market\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        className: \"fishes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, Object.keys(this.state.fishes).map(function (key) {\n        return React.createElement(Fish, {\n          key: key,\n          index: key,\n          details: _this2.state.fishes[key],\n          addToOrder: _this2.addToOrder,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }) // index ={key} neccessary for addToOrder function to access a key prop\n        ;\n      }))), React.createElement(Order, {\n        fishes: this.state.fishes,\n        order: this.state.order,\n        deleteOrderItem: this.deleteOrderItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(Inventory, {\n        addFish: this.addFish,\n        updateFish: this.updateFish,\n        loadSampleFishes: this.loadSampleFishes,\n        fishes: this.state.fishes,\n        deleteFish: this.deleteFish,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }));\n    } // click on add to order in Fish; updates fishes and order state; both states are passed to order; order renders order details\n\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/jemma/Desktop/ReactFishes/catch-of-the-day/src/components/App.js"],"names":["React","Header","Order","Inventory","sampleFishes","Fish","base","App","state","fishes","order","addFish","fish","Date","now","setState","updateFish","key","updatedFish","deleteFish","deleteOrderItem","console","log","loadSampleFishes","addToOrder","params","props","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","ref","syncState","context","setItem","stringify","removeBinding","Object","keys","map","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './Header';\nimport Order from './Order';\nimport Inventory from './Inventory';\nimport sampleFishes from '../sample-fishes';\nimport Fish from './Fish';\nimport base from '../base';\n\n\nclass App extends React.Component {\n  state = {\n    fishes: {},\n    order: {}\n  };\n\n  componentDidMount () {\n    const { params } = this.props.match;\n    //first re-instate local storage\n    const localStorageRef = localStorage.getItem(params.storeId)\n    console.log(localStorageRef);\n    if(localStorageRef){\n      this.setState({ order: JSON.parse(localStorageRef) })\n    }\n\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\n      // firebase ref: reference to a piece of data in database\n      context: this,\n      state: 'fishes'           // sync fish state\n    })\n    // sync state with props provided from Firebase, visible with react devtools in app/ props/match/storeID\n  }\n\n  componentDidUpdate() {\n    console.log(this.state.order);\n    // set key then value\n    localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order))\n    // stringify to change from it returning [object object]\n  }\n\n  // need to listen for unchanges to prevent memory leak\n  componentWillUnmount() {\n    base.removeBinding(this.ref)\n  }\n\n\n  addFish = fish => {\n    // 1.setState: take a copy of existing state.\n    const fishes = {...this.state.fishes}\n    // 2. add our new fish to fishes variable\n    // using timestamp for keys. fish on right side is passed-in fish object from createFish method in AddFishForm\n    fishes[`fish${Date.now()}`] = fish;\n    //Date.now() gives number of milliseconds since 1970...\n\n    //3. set the new fishes object to State.\n    // Takes copied fishes and new fishes and overwrites existing state.\n    this.setState({ fishes: fishes })\n  };\n\n  updateFish = (key, updatedFish) => {\n    // take copy of current state (whole fish state object)\n    const fishes = {...this.state.fishes}\n    // update that state\n    fishes[key] = updatedFish\n    // set the fishes object with new state\n    this.setState ({ fishes: fishes })\n  }\n\n  deleteFish = (key) => {\n    // 1. copy state\n    const fishes = {...this.state.fishes}\n    // 2. update state: must be set to NULL for FIREBASE to know to delete it\n    fishes[key] = null;       // \"delete\" (set to null) by key\n    // 3. setState\n    this.setState({ fishes: fishes })\n  }\n\n  deleteOrderItem = () => {\n  console.log(\"deleted\");\n  }\n\n\n  loadSampleFishes = () => {\n    this.setState({ fishes: sampleFishes})\n  }\n\n  addToOrder = (key) => {\n    // 1. take copy, 2. add to update number in order, 3. update state object\n    const order = {...this.state.order};\n    order[key] = order[key] + 1 || 1;\n    //  if order.fish1 exists, add 1 to total, or if it doesnt, return 1 (add one of that fish.)\n    this.setState({ order: order})\n  }\n\n\n  render() {\n    return (\n      <div className= \"catch-of-the-day\">\n        <div className= \"menu\">\n          <Header tagline=\"Fresh Seafood Market\" />\n          <ul className=\"fishes\">\n            {/* see vid 15 for explanation of keys & mapping */}\n            {Object.keys(this.state.fishes).map( key => (\n              <Fish\n                key={key}\n                index={key}\n                details={this.state.fishes[key]}\n                addToOrder={this.addToOrder}/>\n                // index ={key} neccessary for addToOrder function to access a key prop\n            ))}\n          </ul>\n        </div>\n        <Order\n          fishes={this.state.fishes}\n          order={this.state.order}\n          deleteOrderItem={this.deleteOrderItem}\n        />\n        <Inventory\n          addFish={this.addFish}\n          updateFish={this.updateFish}\n          loadSampleFishes={this.loadSampleFishes}\n          fishes={this.state.fishes}\n          deleteFish={this.deleteFish}\n        />\n\n      </div>\n    )\n  }\n\n  // click on add to order in Fish; updates fishes and order state; both states are passed to order; order renders order details\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}